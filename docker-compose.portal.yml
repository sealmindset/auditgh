services:
  db:
    image: pgvector/pgvector:pg14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5434:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db/portal_init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 20

  postgrest:
    image: postgrest/postgrest:latest
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      PGRST_DB_SCHEMAS: api
      PGRST_DB_ANON_ROLE: postgrest_anon
      PGRST_SERVER_PORT: 3000
      PGRST_JWT_SECRET: ${POSTGREST_JWT_SECRET}
    ports:
      - "3001:3000"

  redis:
    image: redis:7-alpine
    profiles: ["redis"]
    ports:
      - "6379:6379"

  server:
    build:
      context: ./server
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      postgrest:
        condition: service_started
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SCANNER_IMAGE: ${SCANNER_IMAGE}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${AUDIT_WORKSPACE_DIR:-./runs}:/workspace/runs
    ports:
      - "8080:8080"

  web:
    build:
      context: ./web
    depends_on:
      - server
    ports:
      - "5173:80"
    volumes:
      - ./oss_reports:/usr/share/nginx/html/oss_reports:ro

  # Optional: build the scanner image used by the server's docker runner
  scanner:
    build:
      context: .
      dockerfile: Dockerfile
    image: auditgh-scanner:latest
    profiles: ["scanner"]

  # Periodic seeder: discovers repos and upserts projects via PostgREST, then sleeps
  seeder:
    image: auditgh-scanner:latest
    depends_on:
      db:
        condition: service_healthy
      postgrest:
        condition: service_started
    env_file: .env
    environment:
      SEED_INTERVAL: "3600"
    entrypoint: ["sh", "-lc", "while true; do python scan_contributor.py --org \"${GITHUB_ORG}\" --token \"${GITHUB_TOKEN}\" --init-projects-to-postgrest --postgrest-url http://postgrest:3000 --include-archived --include-forks --persist-contributors --persist-commits --max-recent-commits 100 --init-only -v || true; sleep ${SEED_INTERVAL:-3600}; done"]
    profiles: ["seed"]

volumes:
  pg_data:
