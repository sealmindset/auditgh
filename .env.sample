# Security Portal Environment Sample
# Copy to .env and adjust values

# Core
NODE_ENV=development
PORT=8080
SESSION_SECRET=change-me-in-prod
AUTH_DISABLED=true

# OIDC (Entra ID)
OIDC_ISSUER=https://login.microsoftonline.com/${OIDC_TENANT_ID}/v2.0
OIDC_TENANT_ID=
OIDC_CLIENT_ID=
OIDC_CLIENT_SECRET=
OIDC_REDIRECT_URI=http://localhost:8080/auth/callback

# AAD Groups â†’ Roles
AAD_GROUP_READONLY=
AAD_GROUP_PROJECT_ADMIN=
AAD_GROUP_SUPERADMIN=

# Database & Redis
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=security_portal
DATABASE_URL=postgres://postgres:postgres@db:5432/security_portal
REDIS_URL=redis://redis:6379

# PostgREST
# To generate a hex string of 32 characters for JWT secret, run:
# LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 32; echo
POSTGREST_JWT_SECRET=dev-not-for-prod

# GitHub / Orchestration
GITHUB_TOKEN=
GITHUB_ORG=
AUDIT_WORKSPACE_DIR=./runs

# Scanner image name used by the server to run scans in Docker
# IMPORTANT: Build this image for linux/amd64 to match the CodeQL CLI architecture used by the runner:
#   docker buildx build --platform linux/amd64 -t auditgh-scanner:latest .
SCANNER_IMAGE=auditgh-scanner:latest

# GitHub rate-limit tuning (adaptive throttle)
# Target ~50% of the available budget and use a minimum interval of 0.5s/request.
GITHUB_TARGET_UTILIZATION=0.5
GITHUB_MIN_INTERVAL=0.5

# CodeQL resource tuning (used by UI scans; forwarded into scanner container)
# Adjust if you see OOM/Killed during CodeQL analyze.
CODEQL_RAM_MIB=8192
CODEQL_THREADS=1

# Orchestrator CodeQL overrides (optional; CLI > Env > Profile defaults)
# Override default query suite or timeout used by orchestrate_scans.py per profile.
# ORCHESTRATOR_CODEQL_QUERY_SUITE=
# ORCHESTRATOR_CODEQL_TIMEOUT=
# Optionally force languages (comma-separated) e.g. python,java
# ORCHESTRATOR_CODEQL_LANGUAGES=
# Optionally skip CodeQL autobuild for compiled languages (true/false)
# ORCHESTRATOR_CODEQL_SKIP_AUTOBUILD=

# Vector
VECTOR_DIM=1536
