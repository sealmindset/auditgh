import React, { useEffect, useMemo, useState } from 'react'
import { xhrGetJson, xhrPostJson } from '../lib/xhr'

export type ExploitTypeGridProps = {
  projectId: string
}

const EXPLOIT_TYPES = [
  'RCE','RCI','ACE','DoS','Leak',
  'Secrets','SQLi','XSS','CSRF','SSRF',
  'LFI','RFI','Path','Deserial','IDOR',
  'BOLA','AuthN/Z','Priv','Escape','Redirect',
  'CLKJK','Crypto','Logic','SSTI','XXE'
] as const

const PALETTE_TRUE = [
  'bg-red-700 text-white',
  'bg-red-600 text-white',
  'bg-red-500 text-white',
  'bg-orange-600 text-white',
  'bg-orange-500 text-white',
]

function stableIndex(seed: string, mod: number): number {
  let h = 0
  for (let i = 0; i < seed.length; i++) h = (h * 31 + seed.charCodeAt(i)) | 0
  return Math.abs(h) % mod
}

export default function ExploitTypeGrid({ projectId }: ExploitTypeGridProps) {
  const [statusByType, setStatusByType] = useState<Record<string, boolean>>({})
  const [savingType, setSavingType] = useState<string | null>(null)
  const [colorIdxByType, setColorIdxByType] = useState<Record<string, number>>({})
  const types = EXPLOIT_TYPES

  // Load existing rows for project
  useEffect(() => {
    let canceled = false
    async function load() {
      try {
        const sel = 'id,project_id,type,enabled,updated_at'
        const url = `/db/project_exploit_types?select=${encodeURIComponent(sel)}&project_id=eq.${encodeURIComponent(projectId)}`
        const rows = await xhrGetJson(url)
        if (canceled) return
        const s: Record<string, boolean> = {}
        const colors: Record<string, number> = {}
        for (const r of (Array.isArray(rows) ? rows : [])) {
          const abbr = String(r.type || '')
          s[abbr] = !!r.enabled
          if (r.enabled) colors[abbr] = stableIndex(`${projectId}:${abbr}`, PALETTE_TRUE.length)
        }
        setStatusByType(s)
        setColorIdxByType(colors)
      } catch {
        // ignore
      }
    }
    load()
    return () => { canceled = true }
  }, [projectId])

  async function toggle(abbr: string) {
    const next = !(statusByType[abbr] ?? false)
    const prev = statusByType[abbr] ?? false
    // optimistic update
    setSavingType(abbr)
    setStatusByType((p) => ({ ...p, [abbr]: next }))
    if (next) {
      setColorIdxByType((p) => ({ ...p, [abbr]: Math.floor(Math.random() * PALETTE_TRUE.length) }))
    }
    try {
      await xhrPostJson(`/db/rpc/upsert_project_exploit_type`, { p_project_id: projectId, p_type: abbr, p_enabled: next })
    } catch {
      // revert on error
      setStatusByType((p) => ({ ...p, [abbr]: prev }))
    } finally {
      setSavingType(null)
    }
  }

  const cells = useMemo(() => {
    const list = [...types]
    // pad to 25 cells
    while (list.length < 25) list.push('' as any)
    return list
  }, [types])

  return (
    <div className="mt-2">
      <div className="grid grid-cols-5 gap-2">
        {cells.map((abbr, idx) => {
          if (!abbr) return <div key={`empty-${idx}`} className="h-8" />
          const on = !!statusByType[abbr]
          const base = on ? (PALETTE_TRUE[(colorIdxByType[abbr] ?? stableIndex(`${projectId}:${abbr}`, PALETTE_TRUE.length)) % PALETTE_TRUE.length]) : 'bg-slate-100 text-slate-800'
          const saving = savingType === abbr
          return (
            <button
              key={abbr}
              type="button"
              className={`h-8 text-xs rounded border px-2 flex items-center justify-center ${base} ${saving ? 'opacity-70' : ''}`}
              aria-pressed={on}
              title={`${abbr}: ${on ? 'True' : 'Unknown'}`}
              onClick={() => toggle(abbr)}
              disabled={saving}
            >
              {abbr}
            </button>
          )
        })}
      </div>
    </div>
  )
}
