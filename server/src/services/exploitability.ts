import { pool } from '../db/pool.js'

export type EvidenceItem = { url: string; title?: string; source_type?: string; reason?: string; score?: number }

export function normalizeFindingKey(target: 'terraform'|'oss'|'codeql'|'secret'|'cicd', ctx: Record<string, any>): { type: string, key: string } | null {
  const s = (v: any) => (v==null? '': String(v))
  if (target === 'oss') {
    const vid = s((ctx as any).vuln_id || (ctx as any).cve || (ctx as any).ghsa)
    if (/^CVE-\d{4}-\d{4,}$/i.test(vid)) return { type: 'cve', key: vid.toUpperCase() }
    if (/^GHSA-/i.test(vid)) return { type: 'ghsa', key: vid.toUpperCase() }
  } else if (target === 'terraform') {
    const rid = s((ctx as any).rule_id)
    if (rid) return { type: 'terraform_rule', key: rid }
  } else if (target === 'codeql') {
    const rid = s((ctx as any).rule_id)
    if (rid) return { type: 'codeql_rule', key: rid }
  } else if (target === 'secret') {
    const rid = s((ctx as any).detector || (ctx as any).rule_id)
    if (rid) return { type: 'secret_detector', key: rid }
  }
  return null
}

export async function getExploitStatus(type: string, key: string): Promise<any | null> {
  const sql = `select * from public.exploitability_statuses where type=$1 and key=$2 limit 1`
  const { rows } = await pool.query(sql, [type, key])
  return rows?.[0] || null
}

export async function upsertExploitStatus(type: string, key: string, exploitAvailable: boolean, evidence: EvidenceItem[], updatedBy: string, manual = false): Promise<void> {
  const existing = await getExploitStatus(type, key)
  const prevEv: EvidenceItem[] = Array.isArray(existing?.evidence) ? existing.evidence : []
  // merge and de-dup by URL
  const seen = new Set<string>()
  const merged: EvidenceItem[] = []
  for (const r of [...prevEv, ...evidence]) {
    const k = String(r?.url || '').replace(/^http:\/\//,'https://').toLowerCase()
    if (!k || seen.has(k)) continue
    seen.add(k)
    merged.push(r)
  }
  const sql = `insert into public.exploitability_statuses(type, key, exploit_available, evidence, last_auto_update_at, last_manual_update_at, last_updated_by)
               values ($1,$2,$3,$4,${manual? 'null':'now()'},${manual? 'now()':'null'},$5)
               on conflict (type, key) do update set
                 exploit_available = EXCLUDED.exploit_available,
                 evidence = EXCLUDED.evidence,
                 last_auto_update_at = ${manual? 'public.exploitability_statuses.last_auto_update_at':'now()'},
                 last_manual_update_at = ${manual? 'now()':'public.exploitability_statuses.last_manual_update_at'},
                 last_updated_by = EXCLUDED.last_updated_by`
  await pool.query(sql, [type, key, exploitAvailable, JSON.stringify(merged), updatedBy])
}
