import express from 'express'
import { getExploitStatus, upsertExploitStatus } from '../../services/exploitability.js'
import { logger } from '../../config/logging.js'

const router = express.Router()

router.get('/', async (req, res) => {
  try {
    const type = String(req.query.type || '').trim()
    const keySingle = String(req.query.key || '').trim()
    const keysCsv = String(req.query.keys || '').trim()
    if (!type) return res.status(400).json({ error: { code: 'bad_request', message: 'type is required' } })
    const keys = (keySingle ? [keySingle] : (keysCsv ? keysCsv.split(',') : [])).map(s => s.trim()).filter(Boolean)
    if (keys.length === 0) return res.json({ ok: true, items: [] })
    // Batch fetch
    const placeholders = keys.map((_, i) => `$${i+2}`).join(',')
    const sql = `select api_id as id, id as uuid, type, key, exploit_available, evidence, last_auto_update_at, last_manual_update_at, last_updated_by, created_at, updated_at
                 from public.exploitability_statuses where type=$1 and key in (${placeholders})`
    const { pool } = await import('../../db/pool.js')
    const { rows } = await pool.query(sql, [type, ...keys])
    return res.json({ ok: true, items: rows || [] })
  } catch (e: any) {
    logger.warn({ e: String(e?.message || e) }, 'exploitability GET failed')
    return res.status(500).json({ error: { code: 'exploitability_error', message: 'failed to fetch' } })
  }
})

router.post('/', async (req, res) => {
  try {
    const type = String(req.body?.type || '').trim()
    const key = String(req.body?.key || '').trim()
    const exploitAvailable = !!req.body?.exploit_available
    const evidence = Array.isArray(req.body?.evidence) ? req.body.evidence : []
    const who = (req as any).session?.user?.email || (req as any).session?.user?.login || 'user'
    if (!type || !key) return res.status(400).json({ error: { code: 'bad_request', message: 'type and key are required' } })
    await upsertExploitStatus(type, key, exploitAvailable, evidence, `user:${who}`, true)
    const row = await getExploitStatus(type, key)
    return res.json({ ok: true, data: row })
  } catch (e: any) {
    logger.warn({ e: String(e?.message || e) }, 'exploitability POST failed')
    return res.status(500).json({ error: { code: 'exploitability_error', message: 'failed to upsert' } })
  }
})

export const exploitabilityRouter = router
